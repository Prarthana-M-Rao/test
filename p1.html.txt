1. Write a function numTest that takes a number as an argument and returns a Promise that tests if the value is less than or greater than the value 20.

function numTest(num) {
  return new Promise((resolve, reject) => {
    if (num < 20 || num > 20) {
      resolve(`The number ${num} is either less than or greater than 20.`);
    } else {
      reject(`The number ${num} is equal to 20.`);
    }
  });
}

numTest(15)
  .then(result => console.log(result))
  .catch(error => console.error(error));

// Output: The number 15 is either less than or greater than 20.

2. Write a JavaScript code to handle multiple call back functions using JavaScript promises (use promiseobject.then(onfulfilled,onrejected)).

function asyncFunction1() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Async Function 1 completed");
      resolve();
    }, 1000);
  });
}


function asyncFunction2() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Async Function 2 completed");
      resolve();
    }, 2000);
  });
}

function asyncFunction3() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Async Function 3 completed");
      resolve();
    }, 3000);
  });
}

asyncFunction1()
  .then(() => {
    return asyncFunction2();
  })
  .then(() => {
    return asyncFunction3();
  })
  .then(() => {
    console.log("All functions completed");
  })
  .catch((error) => {
    console.log(error);
  });

Async Function 1 completed
Async Function 2 completed
Async Function 3 completed
All functions completed

3. Implement a JavaScript promise to perform arithmetic operations. Display result for each operation synchronously using await () method. (Give delay in each promise object using settimeout() method).

function add(a, b) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(a + b);
    }, 2000);
  });
}

function subtract(a, b) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(a - b);
    }, 3000);
  });
}

function multiply(a, b) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(a * b);
    }, 4000);
  });
}

async function performOperations() {
  let additionResult = await add(3, 4);
  console.log("Addition Result:", additionResult);

  let subtractionResult = await subtract(additionResult, 2);
  console.log("Subtraction Result:", subtractionResult);

  let multiplicationResult = await multiply(subtractionResult, 5);
  console.log("Multiplication Result:", multiplicationResult);
}

performOperations()
  .catch((error) => {
    console.log(error);
  });

output:
Addition Result: 7
Subtraction Result: 5
Multiplication Result: 25

4. Write a Javascript program where user passes the location and a function is called which returns a promise, if the location passed is Paris Below is the output expected:
"Let's take a trip to Paris"
If the location is other than Paris, show the error message "Invalid Location"

function checkLocation(location) {
  return new Promise((resolve, reject) => {
    if (location === "Paris") {
      resolve("Let's take a trip to Paris");
    } else {
      reject("Invalid Location");
    }
  });
}

let userLocation = "Paris"; // Replace with any other location to test

checkLocation(userLocation)
  .then((message) => {
    console.log(message);
  })
  .catch((error) => {
    console.log(error);
  });

output:
Let's take a trip to Paris  -other location-
Invalid Location

5. Write a JavaScript program to book a hotel only after booking a flight.
[Hint: To achieve this, the promise returned from the bookHotel function is resolved only after resolving the promise from bookFlight function.
If the promise gets rejected from bookflight then it won't execute the second function.]

function bookFlight(flightDetails) {
  return new Promise((resolve, reject) => {
    // Simulating booking a flight by waiting for 2 seconds
    setTimeout(() => {
      console.log("Flight booked successfully!");
      resolve(flightDetails);
    }, 2000);
  });
}

function bookHotel(hotelDetails) {
  return new Promise((resolve, reject) => {
    // Simulating booking a hotel by waiting for 2 seconds
    setTimeout(() => {
      console.log("Hotel booked successfully!");
      resolve(hotelDetails);
    }, 2000);
  });
}

bookFlight({flightNumber: "ABC123", from: "New York", to: "London"})
  .then((flightDetails) => {
    console.log("Flight details:", flightDetails);
    return bookHotel({hotelName: "Marriott", location: "London"});
  })
  .then((hotelDetails) => {
    console.log("Hotel details:", hotelDetails);
  })
  .catch((error) => {
    console.log(error);
  });
output
Flight booked successfully!
Flight details: { flightNumber: 'ABC123', from: 'New York', to: 'London' }
Hotel booked successfully!
Hotel details: { hotelName: 'Marriott', location: 'London' }
6. Write a JavaScript program to search a date within a string.
Sample Input: "Albert Einstein was born in Ulm, on 14/03/1879."
Sample Output:14/03/1879.

const str = "Albert Einstein was born in Ulm, on 14/03/1879.";
const regex = /\d{1,2}\/\d{1,2}\/\d{4}/; // Matches dates in the format DD/MM/YYYY

const match = str.match(regex);

if (match) {
  console.log(match[0]); // Output: 14/03/1879
} else {
  console.log("No date found.");
}
7. SESSION HTML
<!DOCTYPE html>
<html>

<head>
    <script>
        function clickCounter() {
            if (typeof(Storage) !== "undefined") {
                if (sessionStorage.clickcount) {
                    sessionStorage.clickcount = Number(sessionStorage.clickcount) + 1;
                } else {
                    sessionStorage.clickcount = 1;
                }
                document.getElementById("result").innerHTML = "You have clicked the button " + sessionStorage.clickcount + " time(s) in this session.";
            } else {
                document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
            }
        }
    </script>
</head>

<body>

    <p><button onclick="clickCounter()" type="button">Click me!</button></p>
    <div id="result"></div>
    <p>Click the button to see the counter increase.</p>
    <p>Close the browser tab (or window), and try again, and the counter is reset.</p>

</body>

</html>

8.LOCAL HTML
<!DOCTYPE html>
<html>

<head>
<script>
function clickCounter() {
if (typeof(Storage) !== "undefined") {
if (localStorage.clickcount) {
localStorage.clickcount = Number(localStorage.clickcount) + 1;
} else {
localStorage.clickcount = 1;
}
document.getElementById("result").innerHTML = "You have clicked the button " + localStorage.clickcount + " time(s).";
} else {
document.getElementById("result").innerHTML = "Sorry, your browser does not support web storage...";
}
}
</script>
</head>

<body>

<p><button onclick="clickCounter()" type="button">Click me!</button></p>
<div id="result"></div>
<p>Click the button to see the counter increase.</p>
<p>Close the browser tab (or window), and try again, and the counter will continue to count (is not reset).</p>

</body>

</html>



9.GEOLOCATION
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Geolocation Demo</title>
</head>

<body>
    <div class="container">
        <button id="show" class="btn">Show my location</button>
        <div id="message"></div>
    </div>
    <script>
        (() => {
            const message = document.querySelector('#message');

            // check if the Geolocation API is supported
            if (!navigator.geolocation) {
                message.textContent = `Your browser doesn't support Geolocation`;
                message.classList.add('error');
                return;
            }

            // handle click event
            const btn = document.querySelector('#show');
            btn.addEventListener('click', function() {
                // get the current position
                navigator.geolocation.getCurrentPosition(onSuccess, onError);
            });


            // handle success case
            function onSuccess(position) {
                const {
                    latitude,
                    longitude
                } = position.coords;

                message.classList.add('success');
                message.textContent = `Your location: (${latitude},${longitude})`;
            }

            // handle error case
            function onError() {
                message.classList.add('error');
                message.textContent = `Failed to get your location!`;
            }
        })();
    </script>
</body>

</html>



